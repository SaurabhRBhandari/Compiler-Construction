% Test Case 8
% Syntactically Incorrect

_testCondition input parameter list[int c1, int c2, int c3, int c4]
output parameter list [real c5, int c6];
    type int: b2b2;
    type real: b2b3;
    definetype record #pass as #gradesheet
    b2b2<---60;
    b2b3 <--- c1*c2/c3 + c4*c1 + 2*c4/4;
    b2b2 <--- b2b2 + c1 + c2 - c3-c4;
    b2b2 <--- b2b2@@@b2b2;
    if ((b2b2 > 60) &&& (~(b2b3 != 754.62E-23)))
    then
        c5 <--- 65.99;

        c6 <--- 65;
    else
        c5 <--- 66;
        c6 <--- 0;
    endif

    return [c5, c6];
end

_autoGrader input parameter list [record #student b6bb6, record #grade d7dd7]
output parameter list [#gradesheet b3b3];
    definetype record #grade as #grades
    record #pass
        type int: pass;
        type int: stdid;
        type #grades: sheet;
    endrecord

    b3b3.pass <--- 0;
    b3b3.stdid<---0;
    b3b3.sheet.ma <--- 0;
    b3b3.sheet.ch <--- 0;
    b3b3.sheet.ph <--- 0;
    b3b3.sheet.com <--- 0;
    b3b3.sheet.eng <--- 0;
    if (b6bb6.marks.ma >= d7dd7.ma)
    then
        b3b3.sheet.ma <--- 1;
    endif
    if (b6bb6.marks.ch >= d7dd7.ch)
    then
        b3b3.sheet.ch <--- 1;
    endif
    if (b6bb6.marks.ph >= d7dd7.ph)
    then
        b3b3.sheet.ph <-- 1;
    endif
    if (b6bb6.marks.com >= d7dd7.com)
    then
        b3b3.sheet.com <--- 1;
    endif
    if (b6bb6.marks.eng >= d7dd7.eng)
    then
        b3b3.sheet.eng <--- 1;
    endif
    b3b3.pass<---b6bb6;

    b3b3.pass<---2;
    if ((b3b3.pass > 0)&&&    (b6bb6.stdid > 0))
    then
        b3b3.tdid <--- b6bb6.stdid;
    else
        b3b3.stdid <----1;
    endif
    write(b3b3.pass);
    return [b3b3];
end


_returnMarks input parameter list [int b2, int b3, int b4, int b5, int e2, int c3, int c4, int c5]
output parameter list [int d6];
    d6<---0;
    record #grade
        type int: ma;
        type int: ph;
        type int: ch;
        type int: eng;
        type int: com;
    endrecord

    d6 <--- 0;
    if (b2 == c2)
    then
        d6 <--- d6 +1;
    endif
    if (b3 == c3)
    then
        d6 <--- d6 + 1;
    endif
    if (b4 == c4)
    then
        d6 <--- d6+1;
    endif
    if (b5 == c5)
    then
        d6 <--- d6+ 1;
    endif

    write(d6);
    return [d6]
end

_main
    record #student
        type int: stdid;
        type #grades: marks;
    endrecord
    definetype record #student as #stud
    type #stud: b2b7;
    type int: b2b4;
    type int: b2b5;
    type int: b2b6;
    type int: c2b4;
    type int: c2b5;
    type int: c2b6;
    type int: c2b7;
    type int: c2b3;
    type real: b2c3;
    type int: b2c4;
    type record #grade: b2c5;
    type #gradesheet: b2c2;
    b2b7.stdid<---19;
    b2b6<---3;
    b2b5<---b2b6+1;

    c2b4 <--- 0;
    
    [c2b3]<---call _returnMarks with parameters[c2b4,b2b6,c2b4,c2b4,c2b4,c2b4,c2b4,b2b5];
    [c2b4]<---call _returnMarks with parameters[c2b3,c2b3,c2b3,c2b3,c2b3,c2b3,c2b3,c2b3];
    b2b7.marks.ph<---5;
    [c2b5]<---call _returnMarks with parameters[c2b4,c2b4,c2b4,c2b4,c2b4,b2b5,b2b6,c2b4];
    [c2b6]<---call _returnMarks with parameters[c2b5,b2b6,b2b6,c2b5,b2b5,c2b5,c2b5,b2b5];
    b2c5.ma<---2;
    b2c5.ch<---9;
    b2c5.eng<---21;
    b2c5.com<---3;
    b2c5.ph<---27;
    [b2c3, b2c4]<--- call _testCondition with parameters[b2b6, c2b4, c2b4, c2b4];
    if ((b2c3 <= 0.05E+04) && (b2c4 != 9))
    then

        [b2c2] <--- call _autoGrader with parameters [b2b7, b2c5];
    else
        [b2c2]<---call _autoGrader with parameter [b2b7, b2c5];
    endif
    write(b2c2);
    return;
end

